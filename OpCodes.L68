00004000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/3/2016 5:15:49 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  *   Register Assignments
00000000                             3  *   D0
00000000                             4  *   D1
00000000                             5  *   D2
00000000                             6  *   D3  Word operation read in from memory
00000000                             7  *   D4  Masked op-code (original op-code with a mask applied)
00000000                             8  *   D5  Testing masked op-code against a set value
00000000                             9  *   D6
00000000                            10  *   D7
00000000                            11  *   A0  
00000000                            12  *   A1  String to append to display buffer
00000000                            13  *   A2
00000000                            14  *   A3
00000000                            15  *   A4
00000000                            16  *   A5  Pointer to next byte after last byte in string
00000000                            17  *   A6  Pointer to current word-op
00000000                            18  *   A7  Stack
00000000                            19  *   
00000000                            20  *   Memory Assignments
00000000                            21  *   7500 - 8000: Stack Pointer
00000000                            22  *   7400: Start of String Pointer (display buffer)
00000000                            23  *-----------------------------------------------------------
00000000  =00007400                 24  STRING_PTR      EQU $7400
00000000  =00001000                 25  BEGIN           EQU $1000
00000000                            26  
00000000                            27      ; Fake instructions that will be generated, and then disassembled
00001000                            28      ORG    BEGIN
00001000  1200                      29      MOVE.B      D0,D1
00001002  2041                      30      MOVEA.L     D1,A0
00001004  43F8 1052                 31      LEA         $1052,A1
00001008  4280                      32      CLR.L       D0
0000100A  4202                      33      CLR.B       D2
0000100C  3C40                      34      MOVEA.W     D0,A6
0000100E  2041                      35      MOVEA.L     D1,A0
00001010  4E71                      36      NOP
00001012                            37      
00001012                            38      ; 
00001012                            39  
00004000                            40      ORG    $4000
00004000                            41  START:                  ; first instruction of program
00004000                            42      
00004000  2E7C 00008000             43          MOVEA.L #$00008000,SP
00004006  3C7C 1000                 44          MOVEA.W #BEGIN,A6
0000400A  2A7C 00007400             45          MOVEA.L #STRING_PTR,A5
00004010                            46  
00004010                            47  ; Begin examining op-code ID
00004010  361E                      48  LOOP    MOVE.W  (A6)+,D3    ; Load word-op to disassemble
00004012  3803                      49          MOVE.W  D3,D4       ; Copy to another location so it's safe to modify
00004014  0244 F000                 50          ANDI.W  #$F000,D4   ; bitmask it for the last 4 bits (op-code ID)
00004018                            51          
00004018  4245                      52          CLR     D5
0000401A  BA44                      53          CMP     D4,D5       ; if (IF == 0)
0000401C  6700 002A                 54          BEQ     ZERO
00004020                            55          
00004020  3A3C 1000                 56          MOVE.W #$1000,D5    ; if (ID == 1)
00004024  BA44                      57          CMP     D4,D5
00004026  6700 00C0                 58          BEQ     OP_MOVEB
0000402A                            59          
0000402A  3A3C 2000                 60          MOVE.W #$2000,D5
0000402E  BA44                      61          CMP     D4,D5
00004030  6700 0018                 62          BEQ     TWO
00004034                            63          
00004034  3A3C 3000                 64          MOVE.W #$3000,D5
00004038  BA44                      65          CMP     D4,D5
0000403A  6700 0010                 66          BEQ     THREE
0000403E                            67          
0000403E  3A3C 4000                 68          MOVE.W #$4000,D5
00004042  BA44                      69          CMP     D4,D5
00004044  6700 0008                 70          BEQ     FOUR
00004048                            71          
00004048                            72  ; End ID cases
00004048                            73          
00004048  60C6                      74  ZERO    BRA     LOOP
0000404A                            75  
0000404A  60C4                      76  TWO     BRA     LOOP
0000404C                            77  
0000404C  60C2                      78  THREE   BRA     LOOP
0000404E                            79  
0000404E                            80  ; op-code ID = 4
0000404E  0803 0008                 81  FOUR    BTST.L  #$08,D3     ; compare the 8th bit in the op-code to 0
00004052  6600 0064                 82          BNE     OP_LEA      ; if it's a 1, it's a LEA op-code
00004056                            83          
00004056  0803 000B                 84          BTST.L  #11,D3     ; compare the 11th bit to 0
0000405A  6700 001A                 85          BEQ     OP_CLR       ; if it's a 0, it's a CLR op-code
0000405E  60B0                      86          BRA     LOOP        ; TO-DO Add more op-code compares for ID=4
00004060                            87  
00004060                            88  ; Print out code.
00004060                            89  LOOP_END
00004060  1ABC 0000                 90          MOVE.B  #0,(A5)
00004064  227C 00007400             91          MOVEA.L #STRING_PTR,A1
0000406A  700D                      92          MOVE.L  #13,D0
0000406C  4E4F                      93          TRAP    #15
0000406E  2A7C 00007400             94          MOVEA.L #STRING_PTR,A5
00004074  609A                      95          BRA     LOOP
00004076                            96  
00004076                            97  ;----------------------------------------------------------------------
00004076                            98  ; Op-Code Processing Labels (Alphabetical Order)
00004076                            99  ;----------------------------------------------------------------------
00004076                           100  
00004076                           101  OP_CLR   
00004076                           102          ; Verify it's a CLR instruction
00004076  3803                     103          MOVE.W  D3,D4
00004078  0244 FF00                104          ANDI.W  #$FF00,D4
0000407C  0C44 4200                105          CMPI.W  #$4200,D4
00004080  6600 00A8                106          BNE     BAD_INPUT
00004084                           107          
00004084                           108          ; CLR cannot have bits 6 and 7 set to 11
00004084  3803                     109          MOVE.W  D3,D4
00004086  0244 00C0                110          ANDI.W  #$00C0,D4
0000408A  0C44 00C0                111          CMPI.W  #$00C0,D4
0000408E  6700 009A                112          BEQ     BAD_INPUT
00004092                           113          
00004092                           114          ; Print instructions
00004092  4EB9 00004146            115          JSR     PRINT_ADDRESS
00004098  43F9 000041CE            116          LEA     TXT_OP_CLR,A1
0000409E  4EB9 00004184            117          JSR     APPEND_STRING
000040A4  4EB9 0000418E            118          JSR     PRINT_SIZE
000040AA                           119          
000040AA  3803                     120          MOVE.W  D3,D4
000040AC  0244 003F                121          ANDI.W  #$003F,D4
000040B0  4EB9 000041BC            122          JSR     DUKE_EA
000040B6                           123          
000040B6  60A8                     124          BRA     LOOP_END
000040B8                           125  
000040B8                           126  OP_LEA
000040B8                           127          ; Veriy it's LEA
000040B8  3803                     128          MOVE.W  D3,D4
000040BA  0244 F1C0                129          ANDI.W  #$F1C0,D4
000040BE  0C44 41C0                130          CMPI.W  #$41C0,D4
000040C2  6600 0066                131          BNE     BAD_INPUT
000040C6                           132          
000040C6                           133          ; Print
000040C6  4EB9 00004146            134          JSR     PRINT_ADDRESS
000040CC  43F9 000041D3            135          LEA     TXT_OP_LEA,A1
000040D2  4EB9 00004184            136          JSR     APPEND_STRING
000040D8                           137          
000040D8  3803                     138          MOVE.W  D3,D4
000040DA  0244 003F                139          ANDI.W  #$003F,D4
000040DE  4EB9 000041BC            140          JSR     DUKE_EA
000040E4                           141          
000040E4  6000 FF7A                142          BRA     LOOP_END
000040E8                           143  
000040E8                           144  OP_MOVEB
000040E8                           145          ; Verify
000040E8  3803                     146          MOVE.W  D3,D4
000040EA  0244 F000                147          ANDI.W  #$F000,D4
000040EE  0C44 1000                148          CMPI.W  #$1000,D4
000040F2  6600 0036                149          BNE     BAD_INPUT
000040F6                           150          
000040F6                           151          ; Print
000040F6  4EB9 00004146            152          JSR     PRINT_ADDRESS
000040FC  43F9 000041D8            153          LEA     TXT_OP_MOVEB,A1
00004102  4EB9 00004184            154          JSR     APPEND_STRING
00004108                           155          
00004108  3803                     156          MOVE.W  D3,D4
0000410A  0244 0FC0                157          ANDI.W  #$0FC0,D4
0000410E  EC4C                     158          LSR.W   #6,D4
00004110  4EB9 000041BC            159          JSR     DUKE_EA
00004116                           160          
00004116  1AFC 002C                161          MOVE.B  #$2C,(A5)+
0000411A                           162          
0000411A  3803                     163          MOVE.W  D3,D4
0000411C  0244 003F                164          ANDI.W  #$003F,D4
00004120  4EB9 000041BC            165          JSR     DUKE_EA
00004126                           166          
00004126  6000 FF38                167          BRA     LOOP_END
0000412A                           168  
0000412A                           169  ;----------------------------------------------------------------------
0000412A                           170  ; Printing Functions
0000412A                           171  ;----------------------------------------------------------------------
0000412A                           172  BAD_INPUT
0000412A                           173          ; XXXXXXXX DATA YYYY
0000412A  4EB9 00004146            174          JSR     PRINT_ADDRESS
00004130  43F9 000041C8            175          LEA     TXT_DATA,A1
00004136  4EB9 00004184            176          JSR     APPEND_STRING
0000413C                           177          
0000413C                           178          ; Print op-code data as hex
0000413C  E95B                     179          ROL.W   #4,D3
0000413E  2203                     180          MOVE.L  D3,D1
00004140  7404                     181          MOVE.L  #4,D2 ; Loop counter. Run 4 times.
00004142                           182          
00004142                           183  PRINT_OP_HEX_LOOP
00004142                           184          ; TODO - FINISH THIS LOOP------------------------------------------------------------------------------------------------------------------
00004142                           185          
00004142  6000 FF1C                186          BRA     LOOP_END
00004146                           187  
00004146                           188  ;--------------------------------------------------
00004146                           189  ; Print the literal address currently in A6, 
00004146                           190  ; This should be the prevously read op-code, which
00004146                           191  ; is the op-code currently being decoded.
00004146                           192  ;--------------------------------------------------
00004146                           193  PRINT_ADDRESS
00004146  48E7 E000                194          MOVEM.L D0-D2,-(SP)
0000414A                           195          
0000414A  200E                     196          MOVE.L  A6,D0 ; Move op-code address to D0
0000414C  5580                     197          SUBI.L  #2,D0 ; Subtract 2 because pointer is to next op-code
0000414E  E998                     198          ROL.L   #4,D0
00004150  2200                     199          MOVE.L  D0,D1
00004152  143C 0008                200          MOVE.B  #8,D2 ; Loop counter. Run 8 times.
00004156                           201          
00004156                           202  PRINT_ADDRESS_LOOP
00004156  0281 0000000F            203          ANDI.L  #$0000000F,D1
0000415C  0C01 000A                204          CMPI.B  #$0A,D1
00004160  6D00 0004                205          BLT     PRINT_ADDRESS_DECIMAL
00004164  5E01                     206          ADDI.B  #$7,D1
00004166                           207          
00004166                           208  PRINT_ADDRESS_DECIMAL
00004166  0601 0030                209          ADDI.B  #$30,D1
0000416A  1AC1                     210          MOVE.B  D1,(A5)+ ; Write char to string
0000416C  E998                     211          ROL.L   #4,D0
0000416E  2200                     212          MOVE.L  D0,D1
00004170  5302                     213          SUBI.B  #1,D2 ; check loop condition
00004172  0C82 00000000            214          CMPI.L  #0,D2
00004178  66DC                     215          BNE     PRINT_ADDRESS_LOOP
0000417A                           216          
0000417A  1AFC 0020                217          MOVE.B  #$20,(A5)+ ; Write ' ' to string
0000417E                           218          
0000417E  4CDF 0007                219          MOVEM.L (SP)+,D0-D2
00004182  4E75                     220          RTS
00004184                           221  
00004184                           222  ;--------------------------------------------------
00004184                           223  ; Append the output buffer with the string starting
00004184                           224  ; at A1. The string at A1 must end with 0 (null).
00004184                           225  ;--------------------------------------------------
00004184                           226  APPEND_STRING
00004184  1AD9                     227          MOVE.B  (A1)+,(A5)+
00004186  0C11 0000                228          CMP.B   #0,(A1)
0000418A  66F8                     229          BNE     APPEND_STRING
0000418C                           230          
0000418C  4E75                     231          RTS
0000418E                           232  
0000418E                           233  ;--------------------------------------------------
0000418E                           234  ; Prints the character B, W, or L depending on the
0000418E                           235  ; value in D4.
0000418E                           236  ; $0000 = B     $0040 = W   anything else = L
0000418E                           237  ;--------------------------------------------------
0000418E                           238  PRINT_SIZE
0000418E  0C44 0000                239          CMPI.W  #$0000,D4
00004192  6700 000E                240          BEQ     PRINT_SIZE_B
00004196  0C44 0040                241          CMPI.W  #$0040,D4
0000419A  6700 000E                242          BEQ     PRINT_SIZE_W
0000419E  6000 0012                243          BRA     PRINT_SIZE_L
000041A2                           244  
000041A2                           245  PRINT_SIZE_B
000041A2  1AFC 0042                246          MOVE.B  #$42,(A5)+
000041A6  6000 000E                247          BRA     PRINT_SIZE_END
000041AA                           248          
000041AA                           249  PRINT_SIZE_W
000041AA  1AFC 0057                250          MOVE.B  #$57,(A5)+
000041AE  6000 0006                251          BRA     PRINT_SIZE_END
000041B2                           252  
000041B2                           253  PRINT_SIZE_L
000041B2  1AFC 004C                254          MOVE.B  #$4C,(A5)+
000041B6                           255  
000041B6                           256  PRINT_SIZE_END
000041B6  1AFC 0020                257          MOVE.B  #$20,(A5)+
000041BA  4E75                     258          RTS
000041BC                           259          
000041BC                           260  ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
000041BC                           261  ; Appends the decoded EA to the output buffer.
000041BC                           262  ; Needs to call Duke's code instead!!!
000041BC                           263  ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
000041BC                           264  ; Temp function to Print EA information
000041BC                           265  DUKE_EA
000041BC  43F9 000041E0            266          LEA     TXT_DEFAULT_EA,A1
000041C2  4EB8 4184                267          JSR     APPEND_STRING
000041C6  4E75                     268          RTS
000041C8                           269          
000041C8                           270  
000041C8                           271  ;----------------------------------------------------------------------
000041C8                           272  ; End of memory variables and constants
000041C8                           273  ;----------------------------------------------------------------------
000041C8                           274  * Put variables and constants here
000041C8= 44 41 54 41 20 00        275  TXT_DATA        DC.B    'DATA ',0
000041CE= 43 4C 52 2E 00           276  TXT_OP_CLR      DC.B    'CLR.',0
000041D3= 4C 45 41 20 00           277  TXT_OP_LEA      DC.B    'LEA ',0
000041D8= 4D 4F 56 45 2E 42 ...    278  TXT_OP_MOVEB    DC.B    'MOVE.B ',0
000041E0= 58 58 58 58 58 58 00     279  TXT_DEFAULT_EA  DC.B    'XXXXXX',0
000041E7                           280      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
APPEND_STRING       4184
BAD_INPUT           412A
BEGIN               1000
DUKE_EA             41BC
FOUR                404E
LOOP                4010
LOOP_END            4060
OP_CLR              4076
OP_LEA              40B8
OP_MOVEB            40E8
PRINT_ADDRESS       4146
PRINT_ADDRESS_DECIMAL  4166
PRINT_ADDRESS_LOOP  4156
PRINT_OP_HEX_LOOP   4142
PRINT_SIZE          418E
PRINT_SIZE_B        41A2
PRINT_SIZE_END      41B6
PRINT_SIZE_L        41B2
PRINT_SIZE_W        41AA
START               4000
STRING_PTR          7400
THREE               404C
TWO                 404A
TXT_DATA            41C8
TXT_DEFAULT_EA      41E0
TXT_OP_CLR          41CE
TXT_OP_LEA          41D3
TXT_OP_MOVEB        41D8
ZERO                4048
